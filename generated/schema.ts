// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class Wash extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Wash must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wash", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Wash | null {
    return changetype<Wash | null>(store.get("Wash", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get inTransfer(): string {
    let value = this.get("inTransfer");
    return value!.toString();
  }

  set inTransfer(value: string) {
    this.set("inTransfer", Value.fromString(value));
  }

  get outTransfer(): string {
    let value = this.get("outTransfer");
    return value!.toString();
  }

  set outTransfer(value: string) {
    this.set("outTransfer", Value.fromString(value));
  }

  get washer(): Bytes {
    let value = this.get("washer");
    return value!.toBytes();
  }

  set washer(value: Bytes) {
    this.set("washer", Value.fromBytes(value));
  }
}

export class Singleton extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Singleton entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Singleton must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Singleton", id.toString(), this);
    }
  }

  static load(id: string): Singleton | null {
    return changetype<Singleton | null>(store.get("Singleton", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get washCount(): BigInt {
    let value = this.get("washCount");
    return value!.toBigInt();
  }

  set washCount(value: BigInt) {
    this.set("washCount", Value.fromBigInt(value));
  }

  get totalWashValue(): BigInt {
    let value = this.get("totalWashValue");
    return value!.toBigInt();
  }

  set totalWashValue(value: BigInt) {
    this.set("totalWashValue", Value.fromBigInt(value));
  }
}

export class Washer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Washer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Washer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Washer", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Washer | null {
    return changetype<Washer | null>(store.get("Washer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get washCount(): BigInt {
    let value = this.get("washCount");
    return value!.toBigInt();
  }

  set washCount(value: BigInt) {
    this.set("washCount", Value.fromBigInt(value));
  }

  get totalWashValue(): BigInt {
    let value = this.get("totalWashValue");
    return value!.toBigInt();
  }

  set totalWashValue(value: BigInt) {
    this.set("totalWashValue", Value.fromBigInt(value));
  }

  get washes(): Array<Bytes> {
    let value = this.get("washes");
    return value!.toBytesArray();
  }

  set washes(value: Array<Bytes>) {
    this.set("washes", Value.fromBytesArray(value));
  }
}
